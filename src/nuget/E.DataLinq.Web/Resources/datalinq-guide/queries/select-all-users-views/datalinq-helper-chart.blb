{"id":"datalinq-helper-chart","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: Chart</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n@{\r\n    var usageStats = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-usagestats\");\r\n}\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage (Pie)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_pie')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(records: Model.Records, jsVariableName: \"isActiveCategoriesCount\", categoryField: \"IsActive\", valueField: \"IsActive\", statType: StatType.Count)\r\n    @DLH.Chart(chartType: ChartType.Pie, jsValueVariable: \"isActiveCategoriesCount\", label: \"Count of active and inactive users\")\r\n</div>\r\n<div id=\"description_chart_pie\" hidden>\r\nde:Erstellt eine Statistik, die die Anzahl der aktiven und inaktiven Benutzer basierend auf dem \"IsActive\"-Feld zählt. \r\nDiese Daten werden als JavaScript-Variable bereitgestellt und anschließend in einem Kreisdiagramm (Chart.js) visualisiert, wobei die Anzahl der aktiven und inaktiven Benutzer angezeigt wird.\r\n\r\nen:Generates a statistic that counts the number of active and inactive users based on the \"IsActive\" field. \r\nThis data is provided as a JavaScript variable and is then visualized in a pie chart (Chart.js), displaying the count of active and inactive users.\r\n</div>\r\n<div id=\"csharp_chart_pie\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByDerived(records: Model.Records, jsVariableName: \"isActiveCategoriesCount\", categoryField: \"IsActive\", valueField: \"IsActive\", statType: StatType.Count)\r\n@@DLH.Chart(chartType: ChartType.Pie, jsValueVariable: \"isActiveCategoriesCount\", label: \"Count of active and inactive users\")\r\n</script></div>\r\n<div id=\"sql_chart_pie\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage (Doughnut)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_doghnut')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(records: Model.Records, jsVariableName: \"isActiveCategoriesCountDoughnut\", categoryField: \"IsActive\", valueField: \"IsActive\", statType: StatType.Count)\r\n    @DLH.Chart(chartType: ChartType.Doughnut, jsValueVariable: \"isActiveCategoriesCountDoughnut\", label: \"Count of active and inactive users\")\r\n</div>\r\n<div id=\"description_chart_doghnut\" hidden>\r\nde:Erstellt eine Statistik, die die Anzahl der aktiven und inaktiven Benutzer basierend auf dem \"IsActive\"-Feld zählt. \r\nDiese Daten werden als JavaScript-Variable bereitgestellt und anschließend in einem Donut-Diagramm (Chart.js) visualisiert, wobei die Anzahl der aktiven und inaktiven Benutzer angezeigt wird.\r\n\r\nen:Generates a statistic that counts the number of active and inactive users based on the \"IsActive\" field. \r\nThis data is provided as a JavaScript variable and is then visualized in a doughnut chart (Chart.js), displaying the count of active and inactive users.\r\n</div>\r\n<div id=\"csharp_chart_doghnut\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByDerived(records: Model.Records, jsVariableName: \"isActiveCategoriesCountDoughnut\", categoryField: \"IsActive\", valueField: \"IsActive\", statType: StatType.Count)\r\n@@DLH.Chart(chartType: ChartType.Doughnut, jsValueVariable: \"isActiveCategoriesCountDoughnut\", label: \"Count of active and inactive users\")\r\n</script></div>\r\n<div id=\"sql_chart_doghnut\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage (Bar)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_bar')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n    @DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\")\r\n</div>\r\n<div id=\"description_chart_bar\" hidden>\r\nde:Erstellt eine Statistik, die die Anzahl der verschiedenen CPU-Lastkategorien basierend auf dem Feld \"CPU_Load\" zählt. \r\nDie Daten werden als JavaScript-Variable bereitgestellt und anschließend in einem Balkendiagramm (Chart.js) visualisiert, das die Anzahl der verschiedenen CPU-Lastkategorien anzeigt.\r\n\r\nen:Generates a statistic that counts the number of different CPU load categories based on the \"CPU_Load\" field. \r\nThe data is provided as a JavaScript variable and is then visualized in a bar chart (Chart.js), displaying the count of different CPU load categories.\r\n</div>\r\n<div id=\"csharp_chart_bar\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n@@DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\")\r\n</script></div>\r\n<div id=\"sql_chart_bar\" hidden>SELECT * FROM UsageStats</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage (Line)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_line')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeTime\", datetimeField: \"CreatedAt\", secondsInterval: 31536000, orderField: OrderField.NameDesc)\r\n    @DLH.Chart(chartType: ChartType.Line, jsValueVariable: \"outputGroupByTimeTime\", label: \"Created users per year\")\r\n</div>\r\n<div id=\"description_chart_line\" hidden>\r\nde:Erstellt eine Statistik, die die Anzahl der erstellten Benutzer pro Jahr basierend auf dem \"CreatedAt\"-Datum zählt. \r\nDie Daten werden als JavaScript-Variable bereitgestellt und anschließend in einem Liniendiagramm (Chart.js) visualisiert, \r\ndas die Anzahl der erstellten Benutzer pro Jahr anzeigt. Der Zeitintervall beträgt 1 Jahr (31536000 Sekunden).\r\n\r\nen:Generates a statistic that counts the number of created users per year based on the \"CreatedAt\" date. \r\nThe data is provided as a JavaScript variable and is then visualized in a line chart (Chart.js), \r\ndisplaying the number of users created per year. The time interval is set to 1 year (31536000 seconds).\r\n</div>\r\n<div id=\"csharp_chart_line\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeTime\", datetimeField: \"CreatedAt\", secondsInterval: 31536000, orderField: OrderField.NameDesc)\r\n@@DLH.Chart(chartType: ChartType.Line, jsValueVariable: \"outputGroupByTimeTime\", label: \"Created users per year\")\r\n</script></div>\r\n<div id=\"sql_chart_line\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With HTML Attributes</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_htmlAttributes')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n    @DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\", htmlAttributes: new { style = \"padding: 24px; background-color: #f9fafb; border: 2px solid #e2e8f0; border-radius: 12px; max-width: 1200px; margin: auto;\" })\r\n</div>\r\n<div id=\"description_chart_htmlAttributes\" hidden>\r\nde:Erstellt eine Statistik, die die CPU-Auslastung kategorisiert und die Anzahl der Einträge für jede Kategorie zählt. \r\nDie Daten werden als JavaScript-Variable bereitgestellt und in einem Balkendiagramm (Chart.js) visualisiert, das die CPU-Auslastung kategorisiert anzeigt. \r\nDas Diagramm wird mit benutzerdefinierten HTML-Attributen gestylt, um es optisch anzupassen, mit einem spezifischen Hintergrund, Rand und maximaler Breite.\r\n\r\nen:Generates a statistic that categorizes CPU load and counts the number of entries for each category. \r\nThe data is provided as a JavaScript variable and visualized in a bar chart (Chart.js), displaying the categorized CPU load. \r\nThe chart is styled with custom HTML attributes to adjust its appearance, with a specific background, border, and maximum width.\r\n</div>\r\n<div id=\"csharp_chart_htmlAttributes\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n@@DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\", htmlAttributes: new { style = \"padding: 24px; background-color: #f9fafb; border: 2px solid #e2e8f0; border-radius: 12px; max-width: 1200px; margin: auto;\" })\r\n</script></div>\r\n<div id=\"sql_chart_htmlAttributes\" hidden>SELECT * FROM UsageStats</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With chart color</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'chart_color')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n    @DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\", htmlAttributes: null, chartColorRGB: new string[] {\"160,0,25\"} )\r\n</div>\r\n<div id=\"description_chart_color\" hidden>\r\nde:Erstellt eine Statistik, die die CPU-Auslastung kategorisiert und die Anzahl der Einträge für jede Kategorie zählt. \r\nDie Daten werden als JavaScript-Variable bereitgestellt und in einem Balkendiagramm (Chart.js) visualisiert, das die kategorisierte CPU-Auslastung anzeigt. \r\nDie Diagrammfunktion verwendet keine benutzerdefinierten HTML-Attribute und ist mit einer benutzerdefinierten RGB-Farbe (160,0,25) für das Diagrammstyling versehen.\r\n\r\nen:Generates a statistic that categorizes CPU load and counts the number of entries for each category. \r\nThe data is provided as a JavaScript variable and visualized in a bar chart (Chart.js), displaying the categorized CPU load. \r\nThe chart function does not use custom HTML attributes and is styled with a custom RGB color (160,0,25).\r\n</div>\r\n<div id=\"csharp_chart_color\" hidden><script type=\"text/plain\">\r\n@@DLH.StatisticsGroupByDerived(usageStats, jsVariableName: \"cpuLoadCountCategorized\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n@@DLH.Chart(chartType: ChartType.Bar, jsValueVariable: \"cpuLoadCountCategorized\", label: \"Display of CPU Load categorized\", htmlAttributes: null, chartColorRGB: new string[] {\"160,0,25\"} )\r\n</script></div>\r\n<div id=\"sql_chart_color\" hidden>SELECT * FROM UsageStats</div>\r\n\r\n</div>","created":"2025-04-16T06:48:54","changed":"2025-05-09T08:17:38.4986055Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}