{"id":"datalinq-helper-filterview","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: FilterView</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n        <span class=\"collapsible-label\">Basic Usage</span>\r\n        <span class=\"collapsible-actions\">\r\n            <span class=\"action-button\" onclick=\"openPopup(event, 'filterView_basicUsage')\">Code/Query</span>\r\n        </span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                filterParameters: [\"FirstName\",\"IsActive\"])\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_basicUsage\" hidden>\r\nde: Die Funktion FilterView wird in Kombination mit der Tabelle verwendet. \r\nSie erzeugt ein Filterelement mit einer Überschrift (\"label\") sowie \r\nTexteingabefeldern für die angegebenen \"filterParameters\" — in diesem Fall \r\n\"FirstName\" und \"LastName\". Zusätzlich werden ein \"Anwenden\"-Button und ein \"Zurücksetzen\"-Button erzeugt.\r\n\r\nen: The FilterView function is used in combination with the table. \r\nIt creates a filter UI element with a heading (\"label\") and \r\ntext input fields for the specified \"filterParameters\" — in this case, \r\n\"FirstName\" and \"LastName\". It also includes an \"Apply\" button and a \"Reset\" button.\r\n</div>\r\n<div id=\"csharp_filterView_basicUsage\" hidden> \r\n<script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n            filterParameters: [\"FirstName\",\"IsActive\"])\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script>\r\n</div>\r\n<div id=\"sql_filterView_basicUsage\" hidden>\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if IsActive\r\n    AND IsActive = @@IsActive\r\n#endif\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">HTML Attributes</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'filterView_htmlAtrributes')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                filterParameters: [\"FirstName\",\"IsActive\"],\r\n                htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" },\r\n                isOpen: true)\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_htmlAtrributes\" hidden>\r\nde: Zusätzlich kann über \"htmlAttributes\" das Styling des gesamten Filterelements angepasst werden \r\n(z. B. Hintergrundfarbe, Rahmen, Abstände). \r\nDer Parameter \"isOpen\" sorgt dafür, dass der Filterbereich beim Start bereits geöffnet ist.\r\n\r\nen: Additionally, \"htmlAttributes\" allows styling the entire filter component \r\n(e.g., background color, borders, spacing). \r\nThe parameter \"isOpen\" ensures that the filter section is expanded by default on initial load.\r\n</div>\r\n<div id=\"csharp_filterView_htmlAtrributes\" hidden>\r\n<script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n            filterParameters: [\"FirstName\",\"IsActive\"],\r\n            htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" },\r\n            isOpen: true)\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script>\r\n</div>\r\n<div id=\"sql_filterView_htmlAtrributes\" hidden>\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if IsActive\r\n    AND IsActive = @@IsActive\r\n#endif\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Overload of filterParameters</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'filterView_overloadFilterParameters')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\" }},\r\n                            {\"IsActive\", new { displayname=\"Is User Active\", dataType=DataType.Checkbox }}})\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_overloadFilterParameters\" hidden>\r\nde: Die \"filterParameters\" können auch als Dictionary übergeben werden, \r\num zusätzliche Optionen wie z. B. \"displayname\" festzulegen. \r\nDadurch kann ein benutzerfreundlicher Anzeigename verwendet werden, \r\nder sich vom tatsächlichen Datenbankfeldnamen unterscheidet.\r\n\r\nBeispiel\r\n{\"FirstName\", new { displayname = \"First Name\" }} zeigt im Filter \"First Name\" an, \r\nobwohl das Datenfeld \"FirstName\" heißt.\r\n\r\nen: The \"filterParameters\" can be passed as a dictionary to allow additional options, \r\nsuch as \"displayname\". This enables using a user-friendly label in the UI \r\ninstead of the actual database field name.\r\n\r\nExample \r\n{\"FirstName\", new { displayname = \"First Name\" }} will show \"First Name\" as the label \r\neven though the underlying field is named \"FirstName\".\r\n</div>\r\n<div id=\"csharp_filterView_overloadFilterParameters\" hidden>\r\n<script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n                filterParameters: new Dictionary<string,object>(){\r\n                    {\"FirstName\", new { displayname=\"First Name\" }},\r\n                    {\"IsActive\", new { displayname=\"Is User Active\", dataType=DataType.Checkbox }}})\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script>\r\n</div>\r\n<div id=\"sql_filterView_overloadFilterParameters\" hidden>\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if IsActive\r\n    AND IsActive = @@IsActive\r\n#endif\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Source and multiple select (Change the Query to use STRING_SPLIT)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'filterView_sourceAndMultiple')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\", source=\"datalinq-guide@select-all-firstnames\", multiple=\"multiple\", valueField=\"FirstName\", nameField=\"FirstName\", prependEmpty=\"true\" }},\r\n                            {\"IsActive\", new { displayname=\"Is User Active\" }}})\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_sourceAndMultiple\" hidden>\r\nde: Es ist möglich, über \"source\" eine zusätzliche Datenquelle (Query) anzugeben. \r\nDadurch wird anstelle eines Texteingabefelds ein select-Element mit den \r\nErgebnissen der angegebenen Abfrage erstellt.\r\n- Mit \"multiple\" wird das Select-Feld zu einem Multiselect erweitert.\r\n- \"prependEmpty: true\" fügt eine leere Auswahloption am Anfang hinzu.\r\n- \"valueField\" und \"nameField\" geben an, welche Felder aus der Datenquelle für \r\nden Wert bzw. die Anzeige verwendet werden.\r\n\r\nHinweis \r\nWenn \"multiple\" verwendet wird, muss die Filterabfrage angepasst werden.\r\n\r\nZusätzlicher Hinweis\r\nFür andere Datenbanken kann eine Anpassung erforderlich sein.\r\n\r\nen: It's possible to specify a \"source\" (a separate query), which will generate a \r\nselect element populated with options from the query result.\r\n- \"multiple\" turns the select field into a multi-select dropdown.\r\n- \"prependEmpty: true\" adds an empty option at the top.\r\n- \"valueField\" and \"nameField\" define which fields from the source are used \r\nfor the option value and the visible label.\r\n\r\nNote\r\nIf \"multiple\" is used, the filter query must be adjusted accordingly.\r\n\r\nAdditional note\r\nChange accordingly for your Database.\r\n</div>\r\n<div id=\"csharp_filterView_sourceAndMultiple\" hidden><script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\", source=\"datalinq-guide@select-all-firstnames\", multiple=\"multiple\", valueField=\"FirstName\", nameField=\"FirstName\", prependEmpty=\"true\" }},\r\n                            {\"IsActive\", new { displayname=\"Is User Active\" }}})\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script></div>\r\n<div id=\"sql_filterView_sourceAndMultiple\" hidden>\r\n-- Query: select-all-users\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if FirstName\r\n    AND FirstName IN (SELECT value FROM STRING_SPLIT(@@FirstName, ';'))\r\n#endif\r\n\r\n#if IsActive\r\n    AND IsActive = @@IsActive\r\n#endif\r\n\r\n--Query: select-all-firstnames\r\nSELECT DISTINCT FirstName\r\nFROM Users\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Select based on other selection</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'filterView_selectBasedSelect')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\", source=\"datalinq-guide@select-all-firstnames\", valueField=\"FirstName\", nameField=\"FirstName\", prependEmpty=\"true\" }},\r\n                            {\"LastName\", new { displayname=\"Surname\", source=\"datalinq-guide@select-surnames-where-firstname?FirstName=[FirstName]\", valueField=\"LastName\", nameField=\"LastName\", prependEmpty=\"true\" }}})\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_selectBasedSelect\" hidden>\r\nde: Es ist möglich, abhängige Select-Felder zu erstellen, bei denen die Auswahl im ersten Feld \r\ndie verfügbaren Optionen im zweiten Feld bestimmt.\r\n\r\nIm gezeigten Beispiel:\r\n- Das Feld \"FirstName\" lädt seine Optionen aus einer Query.\r\n- Nach Auswahl eines Vornamens wird eine zweite Query ausgeführt, um basierend auf dieser Auswahl \r\n  die Nachnamen für das Feld \"LastName\" zu laden.\r\n\r\nDie Abhängigkeit wird durch den Platzhalter [FirstName] in der URL des zweiten \"source\"-Wertes definiert.\r\n\r\nen: You can create dependent select fields where the selection in the first field \r\ndetermines the available options in the second.\r\n\r\nIn this example:\r\n- \"FirstName\" loads options from a query.\r\n- Once a first name is selected, another query is triggered to populate \"LastName\" \r\n  based on that selection.\r\n\r\nThe dependency is defined using the placeholder [FirstName] in the \"source\" URL of the second filter.\r\n</div>\r\n<div id=\"csharp_filterView_selectBasedSelect\" hidden><script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\", source=\"datalinq-guide@select-all-firstnames\", valueField=\"FirstName\", nameField=\"FirstName\", prependEmpty=\"true\" }},\r\n                            {\"LastName\", new { displayname=\"Surname\", source=\"datalinq-guide@select-surnames-where-firstname?FirstName=[FirstName]\", valueField=\"LastName\", nameField=\"LastName\", prependEmpty=\"true\" }}})\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script></div>\r\n<div id=\"sql_filterView_selectBasedSelect\" hidden>\r\n--Query: select-all-users\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if LastName\r\n    AND LastName = @@LastName\r\n#endif\r\n\r\n--Query: select-all-firstnames\r\nSELECT DISTINCT FirstName\r\nFROM Users\r\n\r\n--Query: datalinq-guide@@select-surnames-where-firstname?FirstName=[FirstName]\r\nSELECT DISTINCT LastName\r\nFROM Users\r\n\r\n#if FirstName\r\n    WHERE FirstName = @@FirstName\r\n#endif\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Hidden option (Append ?IsActive=1 at the end of the URL)</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'filterView_hiddenOption')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\" }},\r\n                            {\"IsActive\", new { hidden=\"true\" }}})\r\n\r\n    @DLH.Table(Model.Records, max: 100)\r\n</div>\r\n<div id=\"description_filterView_hiddenOption\" hidden>\r\nde: Wenn ein Filterparameter mit hidden=\"true\" markiert ist, wird er im Filter-Element \r\nnicht angezeigt. Dies ist nützlich, wenn z. B. ein Parameter wie \"IsActive=1\" \r\nüber die URL vorbelegt wird, aber nicht vom Nutzer bearbeitet oder zurückgesetzt \r\nwerden soll. \r\n\r\nSo bleibt der Filter intern aktiv, ohne dass er visuell erscheint oder \r\ndurch \"Reset Filter\" gelöscht wird.\r\n\r\nen: When a filter parameter is marked with hidden=\"true\", it will not be shown in the \r\nfilter element. This is useful for cases where a value like \"IsActive=1\" is preset \r\nvia the URL and should remain active, but not be editable or resettable by the user.\r\n\r\nThe filter stays internally applied without appearing visually or being removed \r\nvia \"Reset Filter\".\r\n</div>\r\n<div id=\"csharp_filterView_hiddenOption\" hidden><script type=\"text/plain\">\r\n@@DLH.FilterView(label: \"Data Filter\", \r\n                    filterParameters: new Dictionary<string,object>(){\r\n                            {\"FirstName\", new { displayname=\"First Name\" }},\r\n                            {\"IsActive\", new { hidden=\"true\" }}})\r\n\r\n@@DLH.Table(Model.Records, max: 100)\r\n</script></div>\r\n<div id=\"sql_filterView_hiddenOption\" hidden>\r\nSELECT *\r\nFROM Users\r\nWHERE 0=0\r\n\r\n#if FirstName\r\n    AND FirstName = @@FirstName\r\n#endif\r\n\r\n#if IsActive\r\n    AND IsActive = @@IsActive\r\n#endif\r\n</div>\r\n\r\n</div>","created":"2025-04-14T07:41:07","changed":"2025-06-02T05:51:24.967414Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}