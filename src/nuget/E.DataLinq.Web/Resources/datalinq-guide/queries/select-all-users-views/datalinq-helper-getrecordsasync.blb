{"id":"datalinq-helper-getrecordsasync","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: GetRecordsAsync</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'getRecordsAsync_basic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var assetCount = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\");\r\n    }\r\n    @if (assetCount != null && assetCount.Length > 0)\r\n    {\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    @foreach (var key in assetCount[0].Keys)\r\n                    {\r\n                        <th>@key</th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @foreach (var asset in assetCount)\r\n                {\r\n                    <tr>\r\n                        @foreach (var value in asset.Values)\r\n                        {\r\n                            <td>@value</td>\r\n                        }\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    }\r\n    else\r\n    {\r\n        <p>No assets found.</p>\r\n    }\r\n</div>\r\n<div id=\"description_getRecordsAsync_basic\" hidden>\r\nde: Getrecordsasync kann verwendet werden, um Daten aus einer anderen Query asynchron in die View zu laden. Diese Daten können anschließend z. B. per Schleife verarbeitet und angezeigt werden.\r\nen: Getrecordsasync can be used to asynchronously load data from another query into the view. That data can then be processed and displayed, for example, by iterating over it.\r\n</div>\r\n<div id=\"csharp_getRecordsAsync_basic\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var assetCount = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\");\r\n}\r\n@@if (assetCount != null && assetCount.Length > 0)\r\n{\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                @@foreach (var key in assetCount[0].Keys)\r\n                {\r\n                    <th>@@key</th>\r\n                }\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            @@foreach (var asset in assetCount)\r\n            {\r\n                <tr>\r\n                    @@foreach (var value in asset.Values)\r\n                    {\r\n                        <td>@@value</td>\r\n                    }\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n}\r\nelse\r\n{\r\n    <p>No assets found.</p>\r\n}\r\n</script></div>\r\n<div id=\"sql_getRecordsAsync_basic\" hidden>\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\nGROUP BY AssetName\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With a filter</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'getRecordsAsync_filter')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var assetCountWithFilter = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\",filter: \"AssetName=Galaxy%20S20\");\r\n    }\r\n    @if (assetCountWithFilter != null && assetCountWithFilter.Length > 0)\r\n    {\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    @foreach (var key in assetCountWithFilter[0].Keys)\r\n                    {\r\n                        <th>@key</th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @foreach (var asset in assetCountWithFilter)\r\n                {\r\n                    <tr>\r\n                        @foreach (var value in asset.Values)\r\n                        {\r\n                            <td>@value</td>\r\n                        }\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    }\r\n    else\r\n    {\r\n        <p>No assets found.</p>\r\n    }\r\n</div>\r\n<div id=\"description_getRecordsAsync_filter\" hidden>\r\nde: Unter filter kann man Key-Value-Paare angeben, die an die Query übergeben werden, um die Daten serverseitig zu filtern.\r\nen: The filter parameter allows specifying key-value pairs that are sent to the query for server-side filtering.\r\n</div>\r\n<div id=\"csharp_getRecordsAsync_filter\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var assetCountWithFilter = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\",filter: \"AssetName=Galaxy%20S20\");\r\n}\r\n</script></div>\r\n<div id=\"sql_getRecordsAsync_filter\" hidden>\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\n\r\n#if AssetName\r\n    AND AssetName = @@AssetName\r\n#endif\r\n\r\nGROUP BY AssetName\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With a order</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'getRecordsAsync_withOrder')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var assetCountWithOrder = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\", orderby: \"-AssetCount\");\r\n    }\r\n    @if (assetCountWithOrder != null && assetCountWithOrder.Length > 0)\r\n    {\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    @foreach (var key in assetCountWithOrder[0].Keys)\r\n                    {\r\n                        <th>@key</th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                @foreach (var asset in assetCountWithOrder)\r\n                {\r\n                    <tr>\r\n                        @foreach (var value in asset.Values)\r\n                        {\r\n                            <td>@value</td>\r\n                        }\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    }\r\n    else\r\n    {\r\n        <p>No assets found.</p>\r\n    }\r\n</div>\r\n<div id=\"description_getRecordsAsync_withOrder\" hidden>\r\nde: Unter orderby kann man Felder angeben, nach denen sortiert werden soll; ein vorangestelltes - sortiert absteigend.\r\nen: The orderby parameter allows sorting by specified fields; prefixing with - makes the sort descending.\r\n</div>\r\n<div id=\"csharp_getRecordsAsync_withOrder\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var assetCountWithOrder = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-assetcount\", orderby: \"-AssetCount\");\r\n}\r\n</script></div>\r\n<div id=\"sql_getRecordsAsync_withOrder\" hidden>\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\nGROUP BY AssetName\r\n\r\n#if _orderby\r\n    ORDER BY @@_orderby\r\n#endif\r\n</div>\r\n\r\n</div>\r\n\r\n</div>","created":"2025-04-15T07:24:02","changed":"2025-05-09T06:35:12.6313684Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}