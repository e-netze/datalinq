{"id":"datalinq-helper-includeclickview","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: IncludeClickView</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'includeClickView_basicUsage')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\")\r\n</div>\r\n<div id=\"description_includeClickView_basicUsage\" hidden>\r\nde:IncludeClickView erstellt einen Button mit dem Text, der in `text` angegeben ist. \r\nWenn der Button angeklickt wird, öffnet sich eine andere Ansicht, die durch die `id` definiert wird. \r\n- Der Button wird mit dem angegebenen Text angezeigt.\r\n- Die `id` verweist auf die Ansicht, die beim Klicken geöffnet werden soll.\r\n- Es ist möglich, `htmlAttributes` hinzuzufügen, um das Aussehen des Buttons anzupassen (z. B. Hintergrundfarbe, Größe, Ränder).\r\nen:IncludeClickView creates a button with the text provided in the `text` parameter. \r\nWhen the button is clicked, another view specified by the `id` will open.\r\n- The button is displayed with the provided text.\r\n- The `id` refers to the view that should be opened upon clicking.\r\n- You can add `htmlAttributes` to customize the button’s appearance (e.g., background color, size, borders).\r\n</div>\r\n<div id=\"csharp_includeClickView_basicUsage\" hidden><script type=\"text/plain\">\r\n@@DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\")\r\n</script></div>\r\n<div id=\"sql_includeClickView_basicUsage\" hidden>\r\n--Query: select-all-users\r\nSELECT * FROM users\r\n\r\n--Query: select-assetcount\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\nGROUP BY AssetName\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Open view with filter</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'includeClickView_filter')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\", filter: \"AssetName=Galaxy%20S20\", orderby: \"\", encodeUrl: true)\r\n</div>\r\n<div id=\"description_includeClickView_filter\" hidden>\r\nde:Der filte`-Parameter ermöglicht das Übergeben von Filterbedingungen an die Zielansicht. \r\nIn diesem Fall wird der Filter `AssetName=Galaxy%20S20` angewendet, um nur Datensätze mit dem Namen \"Galaxy S20\" anzuzeigen.\r\n\r\nen:The filter parameter allows passing filter conditions to the target view. \r\nIn this case, the filter `AssetName=Galaxy%20S20` is applied to display only records where the `AssetName` is \"Galaxy S20\".\r\n</div>\r\n<div id=\"csharp_includeClickView_filter\" hidden><script type=\"text/plain\">\r\n@@DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\", filter: \"AssetName=Galaxy%20S20\", orderby: \"\", encodeUrl: true)\r\n</script></div>\r\n<div id=\"sql_includeClickView_filter\" hidden>\r\n--Query: select-all-users\r\nSELECT * FROM users\r\n\r\n--Query: select-assetcount\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\n\r\n#if AssetName\r\n    AND AssetName = @@AssetName\r\n#endif\r\n\r\nGROUP BY AssetName\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Open view with sorting</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'includeClickView_sorting')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\", filter: \"\", orderby: \"-AssetCount\", encodeUrl: true)\r\n</div>\r\n<div id=\"description_includeClickView_sorting\" hidden>\r\nde:Der orderby-Parameter ermöglicht das Hinzufügen einer Sortierung zur Zielansicht. \r\nIn diesem Fall wird die Sortierung nach dem Feld `AssetCount` vorgenommen, wobei das Minuszeichen (`-`) vor dem Feldnamen die Reihenfolge auf absteigend setzt.\r\nen:The orderby parameter allows adding sorting to the target view's query. \r\nIn this case, sorting is applied to the `AssetCount` field, and the minus sign (`-`) before the field name makes the sorting descending.\r\n</div>\r\n<div id=\"csharp_includeClickView_sorting\" hidden><script type=\"text/plain\">\r\n@@DLH.IncludeClickView(id: \"datalinq-guide@select-assetcount@table-assetcount\", text: \"Open view\", filter: \"\", orderby: \"-AssetCount\", encodeUrl: true)\r\n</script></div>\r\n<div id=\"sql_includeClickView_sorting\" hidden>\r\n--Query: select-all-users\r\nSELECT * FROM users\r\n\r\n--Query: select-assetcount\r\nSELECT AssetName, COUNT(*) as AssetCount\r\nFROM assets\r\nWHERE 0=0\r\n\r\n#if _orderby\r\n    ORDER BY @@_orderby\r\n#endif\r\n\r\nGROUP BY AssetName\r\n</div>\r\n\r\n</div>","created":"2025-04-14T12:30:38","changed":"2025-05-09T05:29:53.7249752Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}