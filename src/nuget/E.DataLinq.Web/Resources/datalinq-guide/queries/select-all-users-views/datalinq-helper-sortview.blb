{"id":"datalinq-helper-sortview","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: SortView</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'sortView_basicUsage')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.SortView(label: \"Sortieren\", \r\n          orderFields: [\"FirstName\",\"LastName\",\"Email\"])\r\n\r\n    @DLH.Table(Model.Records.Take(100))\r\n</div>\r\n<div id=\"description_sortView_basicUsage\" hidden>\r\nde: Die SortView Funktion erstellt ein Sortier-Element mit einer Überschrift, \r\ndie durch das \"label\" definiert wird. Benutzer können eine Tabelle basierend auf \r\nden Feldern, die in \"orderFields\" angegeben sind, in aufsteigender oder absteigender Reihenfolge sortieren. \r\n\r\nIm obigen Beispiel wird eine Sortierfunktion für die Felder \"FirstName\", \"LastName\" \r\nund \"Email\" angeboten. Der Benutzer kann auf jedes dieser Felder klicken, um \r\nzwischen aufsteigender und absteigender Sortierung zu wechseln.\r\n\r\nen: The ortView function creates a sorting element with a heading defined by the \"label\". \r\nUsers can sort a table based on the fields specified in \"orderFields\", either in ascending or descending order.\r\n\r\nIn the above example, sorting functionality is provided for the fields \"FirstName\", \"LastName\", \r\nand \"Email\". The user can click on any of these fields to toggle between ascending and descending sorting.\r\n</div>\r\n<div id=\"csharp_sortView_basicUsage\" hidden><script type=\"text/plain\">\r\n@@DLH.SortView(label: \"Sortieren\", \r\n              orderFields: [\"FirstName\",\"LastName\",\"Email\"])\r\n\r\n@@DLH.Table(Model.Records.Take(100))</script></div>\r\n<div id=\"sql_sortView_basicUsage\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">HTML Attributes and isOpen</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'sortView_htmlAttributes')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.SortView(label: \"Sortieren\", \r\n          orderFields: [\"FirstName\",\"LastName\",\"Email\"],\r\n          htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" }, \r\n          isOpen: true)\r\n\r\n    @DLH.Table(Model.Records.Take(100))\r\n</div>\r\n<div id=\"description_sortView_htmlAttributes\" hidden>\r\nde: Die SortView Funktion kann mit zusätzlichen HTML-Attributen und Styling angepasst werden, \r\ndie über die Option \"htmlAttributes\" bereitgestellt werden. Hier kann z.B. die Darstellung des \r\nSortier-Elements geändert werden, indem CSS-Eigenschaften wie \"padding\", \"background-color\", \r\n\"border\" und \"border-radius\" hinzugefügt werden.\r\n\r\nMit der Option \"isOpen\" wird das Sortier-Element beim Laden der Seite automatisch geöffnet, \r\nsodass der Benutzer sofort mit dem Sortieren beginnen kann, ohne das Element manuell öffnen zu müssen.\r\n\r\nen: The SortView function can be customized with additional HTML attributes and styling provided \r\nthrough the \"htmlAttributes\" option. This allows for changing the appearance of the sorting element, \r\nsuch as adding CSS properties like \"padding\", \"background-color\", \"border\", and \"border-radius\".\r\n\r\nThe \"isOpen\" option makes the sorting element open automatically when the page loads, \r\nso users can start sorting right away without manually opening the element.\r\n</div>\r\n<div id=\"csharp_sortView_htmlAttributes\" hidden><script type=\"text/plain\">\r\n@@DLH.SortView(label: \"Sortieren\", \r\n          orderFields: [\"FirstName\",\"LastName\",\"Email\"],\r\n          htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" }, \r\n          isOpen: true)\r\n          \r\n@@DLH.Table(Model.Records.Take(100))\r\n</script></div>\r\n<div id=\"sql_sortView_htmlAttributes\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Overload of orderFields</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'sortView_overloadOrderFields')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.SortView(label: \"Sortieren\", \r\n          orderFields: new Dictionary<string,object>(){\r\n                        {\"FirstName\", new { displayname=\"First Name\" }},\r\n                        {\"LastName\", new { displayname=\"Surname\" }},\r\n                        {\"Email\", new { displayname=\"E-Mail\" }}})\r\n\r\n    @DLH.Table(Model.Records.Take(100))\r\n</div>\r\n<div id=\"description_sortView_overloadOrderFields\" hidden>\r\nde: Es ist möglich, die \"orderFields\" mit einem Dictionary zu überladen, um benutzerdefinierte \r\nAnzeige-Namen für die Felder zu verwenden, die vom Benutzer sichtbar sind, anstatt der tatsächlichen \r\nDatenbanknamen. Dies ist besonders nützlich, wenn die Feldnamen in der Benutzeroberfläche \r\nbenutzerfreundlicher oder verständlicher angezeigt werden sollen.\r\n\r\nIm Beispiel wurden die Datenbankfelder \"FirstName\", \"LastName\" und \"Email\" durch benutzerfreundlichere \r\nAnzeige-Namen wie \"First Name\", \"Surname\" und \"E-Mail\" ersetzt.\r\n\r\nen: It is possible to overload the \"orderFields\" with a dictionary to provide custom display names for \r\nthe fields visible to the user, instead of using the actual database names. This is particularly \r\nuseful when field names need to be more user-friendly or easier to understand in the user interface.\r\n\r\nIn the example, the database fields \"FirstName\", \"LastName\", and \"Email\" have been replaced by more \r\nuser-friendly display names like \"First Name\", \"Surname\", and \"E-Mail\".\r\n</div>\r\n<div id=\"csharp_sortView_overloadOrderFields\" hidden><script type=\"text/plain\">\r\n@@DLH.SortView(label: \"Sortieren\", \r\n      orderFields: new Dictionary<string,object>(){\r\n                    {\"FirstName\", new { displayname=\"First Name\" }},\r\n                    {\"LastName\", new { displayname=\"Surname\" }},\r\n                    {\"Email\", new { displayname=\"E-Mail\" }}})\r\n                    \r\n@@DLH.Table(Model.Records.Take(100))\r\n</script></div>\r\n<div id=\"sql_sortView_overloadOrderFields\" hidden>SELECT * FROM Users</div>\r\n\r\n</div>","created":"2025-04-14T09:29:11","changed":"2025-05-08T05:24:20.2546447Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}