{"id":"datalinq-helper-executenonquery","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: ExecuteNonQuery</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'executeNonQuery_basic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.ExecuteNonQuery(id: \"datalinq-guide@example-update-status\", parameter: new { UserId=1337, }, buttonText: \"Change status\")\r\n</div>\r\n<div id=\"description_executeNonQuery_basic\" hidden>\r\nde: ExecuteNonQuery führt eine Query Aktion wie ein UPDATE, INSERT oder DELETE aus, ohne dass ein Ergebnis zurückgegeben wird. \r\nMit parameter gibst du die nötigen Eingabewerte mit, buttonText bestimmt den Text auf dem Button. Über htmlAttributes kannst du das Erscheinungsbild und Verhalten anpassen.\r\n\r\nen: ExecuteNonQuery executes a query action like an UPDATE, INSERT, or DELETE without returning a result. \r\nThe parameter object supplies necessary input values, buttonText defines the button label, and htmlAttributes allow styling and behavior customization.\r\n</div>\r\n<div id=\"csharp_executeNonQuery_basic\" hidden><script type=\"text/plain\">\r\n@@DLH.ExecuteNonQuery(id: \"datalinq-guide@example-update-status\", parameter: new { UserId=1337, }, buttonText: \"Change status\")\r\n</script></div>\r\n<div id=\"sql_executeNonQuery_basic\" hidden>\r\nUPDATE Users\r\nSET IsActive = CASE \r\n               WHEN IsActive = 0 THEN 1 \r\n               ELSE 0 \r\n             END\r\nWHERE UserId = @@UserId;\r\n</div>\r\n\r\n</div>","created":"2025-04-14T13:03:38","changed":"2025-05-09T05:36:01.976111Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}