{"id":"datalinq-helper-form","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: Form</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_basicUsage')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n        @DLH.TextFor(record: null, name: \"UserId\")\r\n        @DLH.TextFor(record: null, name: \"AssetName\")\r\n        @DLH.TextFor(record: null, name: \"AcquiredDate\")\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_basicUsage\" hidden>\r\nde:BeginForm startet ein Formular zur Dateneingabe. Über die \"id\" wird das Formular mit \r\neiner spezifischen Abfrage verknüpft, z. B. einem Insert-, Update- oder Delete-Vorgang. \r\nZusätzlich können über \"htmlAttributes\" CSS-Stile oder weitere HTML-Attribute hinzugefügt werden.\r\nTextFor erzeugt ein einfaches Texteingabefeld. \r\n\r\n- Mit \"record\" kann ein Standardwert aus der aktuellen Abfrage übergeben werden.\r\n- \"name\" definiert den Attributnamen des Formularfelds.\r\n- Mit \"htmlAttributes\" können zusätzliche Stile definiert werden.\r\n- \"defaultValue\" setzt einen festen Standardwert.\r\n- \"dataType\" ändert den Eingabetyp von Text auf z. B. \"date\" oder \"datetime\", \r\n  um entsprechende Eingabeelemente (z. B. Date-Picker) bereitzustellen.\r\n\r\nEndForm schließt das Formular ab und definiert die Texte für den Absende-Button (\"submitText\") \r\nund den Abbrechen-Button (\"cancelText\").\r\n\r\nen:BeginForm starts a form for data entry. The \"id\" links the form to a specific query, \r\nsuch as an insert, update, or delete operation. The \"htmlAttributes\" option allows you to \r\nadd styling or additional HTML attributes.\r\nTextFor creates a basic text input field.\r\n\r\n- The \"record\" option can provide a default value from the current query.\r\n- \"name\" sets the form field’s attribute name.\r\n- \"htmlAttributes\" allows custom styling and attributes.\r\n- \"defaultValue\" sets a predefined value for the input.\r\n- \"dataType\" changes the input type from the default \"text\" to \"date\" or \"datetime\" \r\n  for specific input behavior like a date picker.\r\n\r\nEndForm ends the form and defines the text for the submit and cancel buttons \r\nvia \"submitText\" and \"cancelText\".\r\n</div>\r\n<div id=\"csharp_form_basicUsage\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n    @@DLH.TextFor(record: null, name: \"UserId\")\r\n    @@DLH.TextFor(record: null, name: \"AssetName\")\r\n    @@DLH.TextFor(record: null, name: \"AcquiredDate\")\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_basicUsage\" hidden>\r\nINSERT INTO assets (UserId, AssetName, AcquiredDate)\r\nVALUES (@@UserId, @@AssetName, @@AcquiredDate);\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With label and default value</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_labelDefaultValue')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n    @DLH.LabelFor(label: \"User-Id\", name: \"UserId\")\r\n    @DLH.TextFor(record: null, name: \"UserId\")\r\n    @DLH.LabelFor(label: \"Asset Name\", name: \"AssetName\")\r\n    @DLH.TextFor(record: null, name: \"AssetName\", defaultValue: \"Default Asset\")\r\n    @DLH.LabelFor(label: \"Acquired Date\", name: \"AcquiredDate\")\r\n    @DLH.TextFor(record: null, name: \"AcquiredDate\") <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_labelDefaultValue\" hidden>\r\nde:LabelFor erzeugt eine Beschriftung (Label) für ein Formularfeld und wird mit dem \r\nFeldnamen über \"name\" verknüpft. Der anzuzeigende Text wird über \"label\" festgelegt.\r\nStandardmäßig wird nach dem Label automatisch ein Zeilenumbruch erzeugt, um das zugehörige \r\nEingabefeld darunter darzustellen. Wenn jedoch der Zeilenumbruch verhindert werden soll, \r\nkann die Option newLine=\"false\" gesetzt werden.\r\n\r\nIm gezeigten Beispiel wird für jedes Eingabefeld eine passende Beschriftung erstellt.\r\n\r\nen:LabelFor creates a label for a form field and links it using the \"name\" parameter. \r\nThe visible text of the label is defined via the \"label\" option.\r\nBy default, a line break is inserted after the label so that the associated input field \r\nappears on the next line. To prevent the line break and keep elements inline, set \r\n`newLine=\"false\"`.\r\n\r\nIn the example above, each input field is accompanied by a corresponding label.\r\n</div>\r\n<div id=\"csharp_form_labelDefaultValue\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n    @@DLH.LabelFor(label: \"User-Id\", name: \"UserId\")\r\n    @@DLH.TextFor(record: null, name: \"UserId\")\r\n\r\n    @@DLH.LabelFor(label: \"Asset Name\", name: \"AssetName\")\r\n    @@DLH.TextFor(record: null, name: \"AssetName\", defaultValue: \"Default Asset\")\r\n\r\n    @@DLH.LabelFor(label: \"Acquired Date\", name: \"AcquiredDate\")\r\n    @@DLH.TextFor(record: null, name: \"AcquiredDate\") <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_labelDefaultValue\" hidden>\r\nINSERT INTO assets (UserId, AssetName, AcquiredDate)\r\nVALUES (@@UserId, @@AssetName, @@AcquiredDate);\r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataType for Date/DateTime</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_dataTypeDateTime')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n    @DLH.LabelFor(label: \"User-Id\", name: \"UserId\")\r\n    @DLH.TextFor(record: null, name: \"UserId\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Asset Name\", name: \"AssetName\")\r\n    @DLH.TextFor(record: null, name: \"AssetName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Acquired Date\", name: \"AcquiredDate\")\r\n    @DLH.TextFor(record: null, name: \"AcquiredDate\", dataType: DataType.Date) <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_dataTypeDateTime\" hidden>\r\nde:Über die Option \"dataType\" in @@DLH.TextFor kann der Typ des Eingabefeldes definiert werden. \r\nStandardmäßig wird ein Textfeld erstellt. \r\n\r\nMit den Werten\r\n- `DataType.Text`: Einfaches Texteingabefeld (Standard)\r\n- `DataType.Date`: Erzeugt ein Datumsauswahlfeld (Date Picker)\r\n- `DataType.DateTime`: Erzeugt ein Datums- und Zeitauswahlfeld (DateTime Picker)\r\n\r\nDiese Typen ermöglichen eine benutzerfreundlichere Eingabe von Datumswerten direkt über \r\ngeeignete UI-Komponenten wie Kalender oder Zeitauswahl.\r\n\r\nen:The \"dataType\" option in @@DLH.TextFor defines the type of the input field. \r\nBy default, it creates a basic text input.\r\n\r\nSupported values\r\n- `DataType.Text`: Basic text input (default)\r\n- `DataType.Date`: Creates a date picker input\r\n- `DataType.DateTime`: Creates a combined date and time picker\r\n\r\nThese types enable more user-friendly input for dates and times using appropriate UI \r\ncontrols like calendars and time selectors.    \r\n</div>\r\n<div id=\"csharp_form_dataTypeDateTime\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-asset\")\r\n    @@DLH.LabelFor(label: \"User-Id\", name: \"UserId\")\r\n    @@DLH.TextFor(record: null, name: \"UserId\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Asset Name\", name: \"AssetName\")\r\n    @@DLH.TextFor(record: null, name: \"AssetName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Acquired Date\", name: \"AcquiredDate\")\r\n    @@DLH.TextFor(record: null, name: \"AcquiredDate\", dataType: DataType.Date) <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_dataTypeDateTime\" hidden>\r\nINSERT INTO assets (UserId, AssetName, AcquiredDate)\r\nVALUES (@@UserId, @@AssetName, @@AcquiredDate);    \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataLinq-Helper: ComboFor</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_comboFor')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Created at\", name: \"CreatedAt\")\r\n    @DLH.TextFor(record: null, name: \"CreatedAt\", dataType: DataType.Date)\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.ComboFor(record: null, name: \"IsActive\", source: new { source=new string[]{ \"0\", \"1\" }}) <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_comboFor\" hidden>\r\nde:ComboFor erstellt ein Auswahlfeld (Select-Dropdown) innerhalb eines Formulars.\r\n\r\nDie Optionen des Dropdowns können entweder\r\n- direkt über ein String-Array bereitgestellt werden (`source: new string[] { \"0\", \"1\" }`)\r\n- oder über eine externe Datenquelle (z. B. eine Abfrage) geladen werden, indem man eine \r\n  Datenquelle über `source=\"query-id\"` angibt.\r\n\r\nIm Beispiel wird ein einfaches Dropdown mit den Optionen \"0\" und \"1\" erzeugt, \r\nz. B. zur Auswahl, ob ein Benutzer aktiv ist.\r\n\r\nen:ComboFor creates a select dropdown field within a form.\r\n\r\nThe dropdown options can either be\r\n- provided directly via a string array (`source: new string[] { \"0\", \"1\" }`), or\r\n- loaded from an external data source by referencing a query using `source=\"query-id\"`.\r\n\r\nIn the example above, a simple dropdown with options \"0\" and \"1\" is created, \r\nfor instance, to select whether a user is active or not.\r\n</div>\r\n<div id=\"csharp_form_comboFor\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Created at\", name: \"CreatedAt\")\r\n    @@DLH.TextFor(record: null, name: \"CreatedAt\", dataType: DataType.Date)\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.ComboFor(record: null, name: \"IsActive\", source: new { source=new string[]{ \"0\", \"1\" }}) <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_comboFor\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive);  \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataLinq-Helper: HiddenFor</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_hiddenFor')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n    @DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.ComboFor(record: null, name: \"IsActive\", source: new { source=new string[]{ \"0\", \"1\" }}) <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_hiddenFor\" hidden>\r\nde:HiddenFor erzeugt ein verstecktes Eingabefeld (input type=\"hidden\"), das nicht \r\nsichtbar im Formular angezeigt wird, aber beim Absenden dennoch übermittelt wird.\r\n\r\nDieses Feld eignet sich besonders, um automatisch generierte oder vorgegebene Werte \r\nmitzugeben, z. B. Zeitstempel, IDs oder andere Systemdaten.\r\n\r\nIm Beispiel wird das aktuelle Datum im Format \"yyyy-MM-dd\" als Standardwert gesetzt, \r\nz. B. um das Erstellungsdatum eines Datensatzes zu speichern.\r\n\r\nen:HiddenFor creates a hidden input field (input type=\"hidden\") that is not visible \r\nin the form but will be submitted with the form data.\r\n\r\nThis is useful for passing values that should not be edited by the user, such as \r\ntimestamps, IDs, or system-generated metadata.\r\n\r\nIn the example, the current date is passed in the \"yyyy-MM-dd\" format as a default value, \r\ne.g. to store the record’s creation date.\r\n</div>\r\n<div id=\"csharp_form_hiddenFor\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n\r\n    @@DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.ComboFor(record: null, name: \"IsActive\", source: new { source=new string[]{ \"0\", \"1\" }}) <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_hiddenFor\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive);  \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataLinq-Helper: CheckboxFor</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_checkboxFor')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n    @DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.CheckboxFor(record: null, name: \"IsActive\") <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_checkboxFor\" hidden>\r\nde:CheckboxFor erzeugt ein Kontrollkästchen (Checkbox), das dem Benutzer die Möglichkeit \r\ngibt, einen booleschen Wert auszuwählen.\r\n\r\nBeim Absenden des Formulars wird je nach Zustand des Kästchens entweder `true` (wenn \r\nangekreuzt) oder `false` (wenn nicht angekreuzt) zurückgegeben.\r\n\r\nDieses Feld eignet sich besonders für Optionen wie Aktiv/Inaktiv, Zustimmungen \r\n(z. B. AGB akzeptieren) oder andere Ja/Nein-Felder.\r\n\r\nen:CheckboxFor creates a checkbox input, allowing the user to choose a boolean value.\r\n\r\nWhen the form is submitted, it returns `true` if checked and `false` if unchecked.\r\n\r\nThis field is especially useful for flags like Active/Inactive, agreement to terms, \r\nor other Yes/No type inputs.\r\n</div>\r\n<div id=\"csharp_form_checkboxFor\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text)\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n\r\n    @@DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.CheckboxFor(record: null, name: \"IsActive\") <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_checkboxFor\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive);      \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataLinq-Helper: RadioFor</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_radioFor')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, defaultValue: \"Max\")\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, defaultValue: \"Mustermann\")\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n    @DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\") <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_radioFor\" hidden>\r\nde:RadioFor erzeugt eine Gruppe von Radio-Buttons zur Auswahl eines Wertes.\r\n\r\nDie Optionen können entweder\r\n- über ein statisches String-Array definiert werden (`source: new string[]{ \"0\", \"1\" }`), oder\r\n- über eine Datenquelle (z. B. Abfrage) geladen werden (`source=\"query-id\"`).\r\n\r\nEs kann ein Standardwert gesetzt werden (`defaultValue`), der beim Laden des Formulars \r\nbereits vorausgewählt ist.\r\nRadio-Buttons sind ideal für Auswahlfelder, bei denen nur eine Option gewählt werden darf.\r\n\r\nen:RadioFor creates a group of radio buttons for selecting a single value.\r\n\r\nThe options can be\r\n- defined via a static string array (`source: new string[]{ \"0\", \"1\" }`), or\r\n- loaded from an external data source (`source=\"query-id\"`).\r\n\r\nA default selection can be set using `defaultValue`, which will be preselected \r\nwhen the form loads.\r\nRadio buttons are ideal for selections where only one option can be chosen.\r\n</div>\r\n<div id=\"csharp_form_radioFor\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, defaultValue: \"Max\")\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, defaultValue: \"Mustermann\")\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text)\r\n\r\n    @@DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\") <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_radioFor\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive);  \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">With DataLinq-Helper: TextboxFor</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_textboxFor')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, defaultValue: \"Max\")\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, defaultValue: \"Mustermann\")\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextboxFor(record: null, name: \"Email\", htmlAttributes: null, defaultValue: \"\")\r\n    @DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\") <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_textboxFor\" hidden>\r\nde:`TextboxFor` erzeugt ein mehrzeiliges Texteingabefeld (Textarea) innerhalb eines Formulars. \r\nEs kann mit einem Standardwert (`defaultValue`) befüllt und über `htmlAttributes` gestylt werden.\r\n\r\nen:`TextboxFor` creates a multiline text input field (textarea) within a form. \r\nIt can be prefilled using `defaultValue` and styled using `htmlAttributes`.\r\n</div>\r\n<div id=\"csharp_form_textboxFor\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\")\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, defaultValue: \"Max\")\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, defaultValue: \"Mustermann\")\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextboxFor(record: null, name: \"Email\", htmlAttributes: null, defaultValue: \"\")\r\n\r\n    @@DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\") <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_textboxFor\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive);  \r\n</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Example with styling</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'form_example')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.BeginForm(id: \"datalinq-guide@insert-user\", htmlAttributes:new { style = \"padding: 24px; background-color: #f9fafb; border: 1px solid #e2e8f0; border-radius: 12px; max-width: 600px; margin: auto;\" })\r\n    @DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n    @DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n    @DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n    @DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n    @DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\", htmlAttributes:new { style = \"margin-right: 8px; accent-color: #3b82f6;\" }) <br />\r\n    @DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</div>\r\n<div id=\"description_form_example\" hidden>\r\nde:Dieses Beispiel zeigt ein vollständiges Formular mit verschiedenen Eingabeelementen \r\n(Textfelder, versteckte Felder, Radiobuttons), das durch HTML-Attribute individuell \r\ngestylt wurde.\r\n\r\nBesonderheiten\r\n- `htmlAttributes` ermöglichen das gezielte Stylen von Formularelementen (Padding, Farben, Ränder etc.).\r\n- `defaultValue` setzt vorausgewählte Werte, z. B. beim Laden der Seite.\r\n- `HiddenFor` wird verwendet, um nicht sichtbare Informationen wie ein Erstellungsdatum zu speichern.\r\n- `RadioFor` ermöglicht die Auswahl zwischen mehreren festen Optionen (hier: Aktiviert Ja/Nein).\r\n\r\nDas Layout eignet sich besonders für übersichtliche Formulare mit moderner UI und responsivem Design.\r\n\r\nen:This example demonstrates a complete form with various input types (text fields, hidden field, \r\nradio buttons) and custom styling using `htmlAttributes`.\r\n\r\nHighlights\r\n- `htmlAttributes` are used to apply custom styles (padding, color, borders, etc.) \r\n  to individual elements.\r\n- `defaultValue` is used to pre-fill fields when the form loads.\r\n- `HiddenFor` is used to store non-visible data like a creation date.\r\n- `RadioFor` allows selection between fixed options (e.g., Active: Yes/No).\r\n\r\nThe layout is ideal for clean, user-friendly forms with a modern and responsive design.\r\n</div>\r\n<div id=\"csharp_form_example\" hidden><script type=\"text/plain\">\r\n@@DLH.BeginForm(id: \"datalinq-guide@insert-user\", htmlAttributes:new { style = \"padding: 24px; background-color: #f9fafb; border: 1px solid #e2e8f0; border-radius: 12px; max-width: 600px; margin: auto;\" })\r\n    @@DLH.LabelFor(label: \"First name\", name: \"FirstName\")\r\n    @@DLH.TextFor(record: null, name: \"FirstName\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n\r\n    @@DLH.LabelFor(label: \"Surname\", name: \"LastName\")\r\n    @@DLH.TextFor(record: null, name: \"LastName\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n\r\n    @@DLH.LabelFor(label: \"E-Mail\", name: \"Email\")\r\n    @@DLH.TextFor(record: null, name: \"Email\", dataType: DataType.Text, htmlAttributes: new { style = \"width: 100%; padding: 10px 12px; border: 1px solid #cbd5e1; border-radius: 6px; margin-bottom: 16px; font-size: 16px;\" })\r\n\r\n    @@DLH.HiddenFor(record: null, name: \"CreatedAt\", defaultValue: @DateTime.Now.ToString(\"yyyy-MM-dd\"))\r\n\r\n    @@DLH.LabelFor(label: \"Activated\", name: \"IsActive\")\r\n    @@DLH.RadioFor(record: null,name: \"IsActive\", source:  new { source=new string[]{ \"0\",\"1\" }} , defaultValue: \"0\", htmlAttributes:new { style = \"margin-right: 8px; accent-color: #3b82f6;\" }) <br />\r\n@@DLH.EndForm(submitText: \"Form submitted\", cancelText: \"Form canceled\")\r\n</script></div>\r\n<div id=\"sql_form_example\" hidden>\r\nINSERT INTO users (FirstName, LastName, Email, CreatedAt, IsActive)\r\nVALUES (@@FirstName, @@LastName, @@Email, @@CreatedAt, @@IsActive); \r\n</div>\r\n\r\n</div>","created":"2025-04-14T10:53:01","changed":"2025-05-08T06:30:17.6174405Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}