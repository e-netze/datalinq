{"id":"datalinq-general-linq","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq: LinQ</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n<div class=\"wrapper\">\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Filter: Active Users Only</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_activeUser')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var activeUsers = Model.Records\r\n            .Where(r => Convert.ToBoolean(r[\"IsActive\"]))\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: activeUsers)\r\n</div>\r\n<div id=\"description_linq_activeUser\" hidden>\r\nde: Dieses Snippet filtert alle Datensätze aus Model.Records, bei denen IsActive auf true gesetzt ist, und speichert sie als Array.\r\nen: This snippet filters all records from Model.Records where IsActive is set to true and stores them as an array.\r\n</div>\r\n<div id=\"csharp_linq_activeUser\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var activeUsers = Model.Records\r\n        .Where(r => Convert.ToBoolean(r[\"IsActive\"]))\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: activeUsers)\r\n</script></div>\r\n<div id=\"sql_linq_activeUser\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Sort: Last Name A-Z</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_sortAZ')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var sortedByLastName = Model.Records\r\n            .OrderBy(r => r[\"LastName\"]?.ToString())\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: sortedByLastName)\r\n</div>\r\n<div id=\"description_linq_sortAZ\" hidden>\r\nde: Dieses Snippet sortiert alle Datensätze aus Model.Records alphabetisch nach dem Feld LastName und speichert sie als Array.\r\nen: This snippet sorts all records from Model.Records alphabetically by the LastName field and stores them as an array.\r\n</div>\r\n<div id=\"csharp_linq_sortAZ\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var sortedByLastName = Model.Records\r\n        .OrderBy(r => r[\"LastName\"]?.ToString())\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: sortedByLastName)\r\n</script></div>\r\n<div id=\"sql_linq_sortAZ\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Take: First 5 Records</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_take5')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var firstFive = Model.Records\r\n            .Take(5)\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: firstFive)\r\n</div>\r\n<div id=\"description_linq_take5\" hidden>\r\nde: Dieses Snippet nimmt die ersten fünf Datensätze aus Model.Records und speichert sie als Array.\r\nen: This snippet takes the first five records from Model.Records and stores them as an array.\r\n</div>\r\n<div id=\"csharp_linq_take5\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var firstFive = Model.Records\r\n        .Take(5)\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: firstFive)\r\n</script></div>\r\n<div id=\"sql_linq_take5\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Skip: First 3 Records</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_skip3')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var afterThree = Model.Records\r\n            .Skip(3)\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: afterThree)\r\n</div>\r\n<div id=\"description_linq_skip3\" hidden>\r\nde: Dieses Snippet überspringt die ersten drei Datensätze aus Model.Records und speichert die restlichen als Array.\r\nen: This snippet skips the first three records from Model.Records and stores the remaining ones as an array.\r\n</div>\r\n<div id=\"csharp_linq_skip3\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var afterThree = Model.Records\r\n        .Skip(3)\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: afterThree)\r\n</script></div>\r\n<div id=\"sql_linq_skip3\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Filter: Email contains \"example.com\"</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_filterMail')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var filteredEmails = Model.Records\r\n            .Where(r => r[\"Email\"]?.ToString().Contains(\"example.com\") == true)\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: filteredEmails)\r\n</div>\r\n<div id=\"description_linq_filterMail\" hidden>\r\nde: Dieses Snippet filtert alle Datensätze, deren \"Email\"-Feld die Zeichenkette \"example.com\" enthält, und speichert sie als Array.\r\nen: This snippet filters all records whose \"Email\" field contains the string \"example.com\" and stores them as an array.\r\n</div>\r\n<div id=\"csharp_linq_filterMail\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var filteredEmails = Model.Records\r\n        .Where(r => r[\"Email\"]?.ToString().Contains(\"example.com\") == true)\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: filteredEmails)\r\n</script></div>\r\n<div id=\"sql_linq_filterMail\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Sort: Newest Users First</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_sortNewest')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var newestFirst = Model.Records\r\n            .OrderByDescending(r => Convert.ToDateTime(r[\"CreatedAt\"]))\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: newestFirst);\r\n</div>\r\n<div id=\"description_linq_sortNewest\" hidden>\r\nde: Dieses Snippet sortiert die Datensätze absteigend nach dem \"CreatedAt\"-Datum, sodass die neuesten Einträge zuerst erscheinen.\r\nen: This snippet sorts the records in descending order by the \"CreatedAt\" date, so the newest entries appear first.\r\n</div>\r\n<div id=\"csharp_linq_sortNewest\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var newestFirst = Model.Records\r\n        .OrderByDescending(r => Convert.ToDateTime(r[\"CreatedAt\"]))\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: newestFirst);\r\n</script></div>\r\n<div id=\"sql_linq_sortNewest\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Active Users Ordered by First Name</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_activeOrderByFirstName')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var sortedActive = Model.Records\r\n            .Where(r => Convert.ToBoolean(r[\"IsActive\"]))\r\n            .OrderBy(r => r[\"FirstName\"]?.ToString())\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: sortedActive)\r\n</div>\r\n<div id=\"description_linq_activeOrderByFirstName\" hidden>\r\nde: Diese Anweisung filtert nur aktive Datensätze (IsActive ist wahr) und sortiert sie anschließend alphabetisch nach dem FirstName.\r\nen: This statement filters only active records (IsActive is true) and then sorts them alphabetically by FirstName.\r\n</div>\r\n<div id=\"csharp_linq_activeOrderByFirstName\" hidden><script type=\"text/plain\">\r\n@@{\r\n    var sortedActive = Model.Records\r\n        .Where(r => Convert.ToBoolean(r[\"IsActive\"]))\r\n        .OrderBy(r => r[\"FirstName\"]?.ToString())\r\n        .ToArray();\r\n}\r\n\r\n@@DLH.Table(records: sortedActive)\r\n</script></div>\r\n<div id=\"sql_linq_activeOrderByFirstName\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">Take: 3 Newest Users</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'linq_3newest')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @{\r\n        var recentUsers = Model.Records\r\n            .OrderByDescending(r => Convert.ToDateTime(r[\"CreatedAt\"]))\r\n            .Take(3)\r\n            .ToArray();\r\n    }\r\n    @DLH.Table(records: recentUsers)\r\n</div>\r\n<div id=\"description_linq_3newest\" hidden>\r\nde: Diese Anweisung sortiert die Datensätze nach dem CreatedAt-Datum in absteigender Reihenfolge und wählt dann die neuesten 3 aus.\r\nen: This statement sorts the records by the CreatedAt date in descending order and then selects the latest 3.\r\n</div>\r\n<div id=\"csharp_linq_3newest\" hidden><script type=\"text/plain\">\r\n@@{\r\n        var recentUsers = Model.Records\r\n            .OrderByDescending(r => Convert.ToDateTime(r[\"CreatedAt\"]))\r\n            .Take(3)\r\n            .ToArray();\r\n}\r\n@@DLH.Table(records: recentUsers)\r\n</script></div>\r\n<div id=\"sql_linq_3newest\" hidden>SELECT * FROM Users</div>\r\n\r\n</div>\r\n","created":"2025-04-25T06:38:10","changed":"2025-05-08T09:05:34.6821159Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}