{"id":"datalinq-helper-statistics","name":null,"description":null,"code":"<div class=\"navbar\">\r\n  <div class=\"title\" id=\"function-title\"><a href=\"https://localhost:7277/datalinq/report/datalinq-guide@select-all-users@index\">DataLinq-Helper: Statistics</a></div>\r\n  <div style=\"width: 30px;\"></div> \r\n</div>\r\n\r\n@{\r\n    var usageStats = await DLH.GetRecordsAsync(id: \"datalinq-guide@select-usagestats\");\r\n}\r\n\r\n<div class=\"wrapper\">\r\n<!-- StatisticsCount -->\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsCount: Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_countBasic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsCount(records: Model.Records)\r\n</div>\r\n<div id=\"description_statistics_countBasic\" hidden>\r\nde:Erzeugt ein Element, das die Anzahl der Datensätze anzeigt. Nützlich, um auf einen Blick zu sehen, wie viele Einträge geladen wurden.\r\n\r\nen:Creates an element that displays the number of records. Useful to quickly see how many entries have been loaded.\r\n</div>\r\n<div id=\"csharp_statistics_countBasic\" hidden><script type=\"text/plain\">@@DLH.StatisticsCount(records: Model.Records)</script></div>\r\n<div id=\"sql_statistics_countBasic\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsCount: With label and HTML Attributes</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_countLabelAttributes')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsCount(records: Model.Records, label: \"Count of records: \", htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" })\r\n</div>\r\n<div id=\"description_statistics_countLabelAttributes\" hidden>\r\nde:Mit label kann ein eigener Text vor der Anzahl angezeigt werden. htmlAttributes ermöglicht das Stylen des Elements, z. B. mit Abstand, Farbe oder Rahmen.\r\n\r\nen:The label allows a custom text to be shown before the count. htmlAttributes lets you style the element, such as adding spacing, color, or border.\r\n</div>\r\n<div id=\"csharp_statistics_countLabelAttributes\" hidden><script type=\"text/plain\">@@DLH.StatisticsCount(records: Model.Records, label: \"Count of records: \", htmlAttributes: new { style = \"padding: 16px; background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; margin-bottom: 16px;\" })</script></div>\r\n<div id=\"sql_statistics_countLabelAttributes\" hidden>SELECT * FROM Users</div>\r\n\r\n<!-- StatisticsGroupBy -->\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupBy: Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupBasic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupBy(records: Model.Records, jsVariableName: \"outputGroupBy\", field: \"Email\")\r\n    <div id=\"statisticsGroupBy\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsGroupBy\").textContent = JSON.stringify(outputGroupBy);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupBasic\" hidden>\r\nde:Nimmt Daten und gruppiert sie nach dem angegebenen Feld. \r\nErstellt daraus eine Chart.js-kompatible Datenstruktur und speichert sie in einer JavaScript-Variable mit dem angegebenen Namen zur weiteren Verwendung.\r\n\r\nen:Takes data and groups it by the specified field. \r\nIt generates a Chart.js-compatible data structure and stores it in a JavaScript variable with the given name for further use.\r\n</div>\r\n<div id=\"csharp_statistics_groupBasic\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupBy(records: Model.Records, jsVariableName: \"outputGroupBy\", field: \"Email\")</script></div>\r\n<div id=\"sql_statistics_groupBasic\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupBy: With order</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupOrder')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupBy(records: Model.Records, jsVariableName: \"outputGroupByOrder\", field: \"Email\", orderField: OrderField.NameDesc)\r\n    <div id=\"statisticsGroupByOrder\"></div>\r\n    \r\n    <script>\r\n        document.getElementById(\"statisticsGroupByOrder\").textContent = JSON.stringify(outputGroupByOrder);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupOrder\" hidden>\r\nde:Gruppiert die Daten nach dem angegebenen Feld und sortiert die Gruppen nach Namen absteigend. \r\nDie resultierende Chart.js-kompatible Struktur wird in einer JavaScript-Variable gespeichert.\r\n\r\nen:Groups the data by the specified field and orders the groups by name descending. \r\nThe resulting Chart.js-compatible structure is stored in a JavaScript variable.\r\n</div>\r\n<div id=\"csharp_statistics_groupOrder\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupBy(records: Model.Records, jsVariableName: \"outputGroupByOrder\", field: \"Email\", orderField: OrderField.NameDesc)</script></div>\r\n<div id=\"sql_statistics_groupOrder\" hidden>SELECT * FROM Users</div>\r\n\r\n<!-- StatisticsGroupByDerived -->\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupByDerived: Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupDerivedBasic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(records: usageStats, jsVariableName: \"outputGroupByDerived\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count)\r\n    <div id=\"statisticsGroupByOrderDerived\"></div>\r\n    \r\n    <script>\r\n        document.getElementById(\"statisticsGroupByOrderDerived\").textContent = JSON.stringify(outputGroupByDerived);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupDerivedBasic\" hidden>\r\nde:Erstellt gruppierte Statistikdaten basierend auf einem kategorischen Feld und berechnet für jede Gruppe einen Wert, hier z. B. die Anzahl der Einträge. \r\nDie formatierte Ausgabe wird als JavaScript-Variable gespeichert und ist mit Chart.js nutzbar.\r\n\r\nen:Creates grouped statistical data based on a category field and computes a value per group, such as the count of entries. \r\nThe formatted output is stored as a JavaScript variable and is compatible with Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_groupDerivedBasic\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupByDerived(records: usageStats, jsVariableName: \"outputGroupByDerived\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count)</script></div>\r\n<div id=\"sql_statistics_groupDerivedBasic\" hidden>SELECT * FROM UsageStats</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupByDerived: WithOrder</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupDerivedOrder')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByDerived(records: usageStats, jsVariableName: \"outputGroupByDerivedOrder\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)\r\n    <div id=\"statisticsGroupByOrderDerivedOrdered\"></div>\r\n    \r\n    <script>\r\n        document.getElementById(\"statisticsGroupByOrderDerivedOrdered\").textContent = JSON.stringify(outputGroupByDerivedOrder);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupDerivedOrder\" hidden>\r\nde:Sortiert die gruppierten Statistikdaten nach dem Namen der Kategorien in aufsteigender Reihenfolge. \r\nDas Ergebnis wird als JavaScript-Variable ausgegeben und kann z. B. in Chart.js verwendet werden.\r\n\r\nen:Sorts the grouped statistical data by category name in ascending order. \r\nThe result is provided as a JavaScript variable, ready to be used with tools like Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_groupDerivedOrder\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupByDerived(records: usageStats, jsVariableName: \"outputGroupByDerivedOrder\", categoryField: \"CPU_Load\", valueField: \"CPU_Load\", statType: StatType.Count, orderField: OrderField.NameAsc)</script></div>\r\n<div id=\"sql_statistics_groupDerivedOrder\" hidden>SELECT * FROM UsageStats</div>\r\n\r\n<!-- StatisticsGroupByTime -->\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupByTime: Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupTimeBasic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTime\", datetimeField: \"CreatedAt\")\r\n    <div id=\"statisticsGroupByTime\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsGroupByTime\").textContent = JSON.stringify(outputGroupByTime);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupTimeBasic\" hidden>\r\nde:Gruppiert die Datensätze basierend auf einem Datums-/Zeitfeld. \r\nDie gruppierten Daten werden als JavaScript-Variable ausgegeben und können z. B. in Chart.js für zeitbasierte Diagramme genutzt werden.\r\n\r\nen:Groups records based on a datetime field. \r\nThe grouped data is output as a JavaScript variable and can be used in Chart.js for time-based charts.\r\n</div>\r\n<div id=\"csharp_statistics_groupTimeBasic\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTime\", datetimeField: \"CreatedAt\")</script></div>\r\n<div id=\"sql_statistics_groupTimeBasic\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupByTime: With category</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupTimeCategory')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeCategory\", datetimeField: \"CreatedAt\", categoryField: \"IsActive\")\r\n    <div id=\"statisticsGroupByTimeCategory\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsGroupByTimeCategory\").textContent = JSON.stringify(outputGroupByTimeCategory);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupTimeCategory\" hidden>\r\nde:Gruppiert die Datensätze nach einem Datums-/Zeitfeld und zusätzlich nach einer Kategorie. \r\nDie gruppierten Daten werden als JavaScript-Variable bereitgestellt und ermöglichen z. B. zeitbasierte Diagramme mit Kategorien in Chart.js.\r\n\r\nen:Groups records by a datetime field and additionally by a category. \r\nThe grouped data is provided as a JavaScript variable, enabling category-based time charts in Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_groupTimeCategory\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeCategory\", datetimeField: \"CreatedAt\", categoryField: \"IsActive\")</script></div>\r\n<div id=\"sql_statistics_groupTimeCategory\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsGroupByTime: With time (yearly) interval and order</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_groupTimeIntervalOrder')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeTime\", datetimeField: \"CreatedAt\", secondsInterval: 31536000, orderField: OrderField.NameDesc)\r\n    <div id=\"statisticsGroupByTimeTime\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsGroupByTimeTime\").textContent = JSON.stringify(outputGroupByTimeTime);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_groupTimeIntervalOrder\" hidden>\r\nde:Gruppiert die Datensätze nach einem Zeitintervall in Sekunden (z. B. jährlich mit 31536000) basierend auf einem Datumsfeld. \r\nDie Sortierung erfolgt nach dem angegebenen Feld, und die Daten werden als JavaScript-Variable für z. B. Zeitdiagramme in Chart.js bereitgestellt.\r\n\r\nen:Groups records by a time interval in seconds (e.g., yearly with 31536000) based on a datetime field. \r\nSorting is done using the specified field, and the data is exposed as a JavaScript variable for use in time-based charts in Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_groupTimeIntervalOrder\" hidden><script type=\"text/plain\">@@DLH.StatisticsGroupByTime(records: Model.Records, jsVariableName: \"outputGroupByTimeTime\", datetimeField: \"CreatedAt\", secondsInterval: 31536000, orderField: OrderField.NameDesc)</script></div>\r\n<div id=\"sql_statistics_groupTimeIntervalOrder\" hidden>SELECT * FROM Users</div>\r\n\r\n<!-- StatisticsTime -->\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsTime: Basic Usage</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_timeBasic')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsTime(records: Model.Records, jsVariableName: \"outputTime\", datetimeField: \"CreatedAt\", valueField: \"CreatedAt\")\r\n    <div id=\"statisticsTime\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsTime\").textContent = JSON.stringify(outputTime);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_timeBasic\" hidden>\r\nde:Erstellt eine Zeitreihe basierend auf einem Datumsfeld, wobei dieses gleichzeitig als Wertefeld verwendet wird. \r\nDie Daten werden als JavaScript-Variable bereitgestellt, z. B. zur Visualisierung zeitlicher Entwicklungen mit Chart.js.\r\n\r\nen:Generates a time series based on a datetime field, using the same field as the value source. \r\nThe data is provided as a JavaScript variable, for example to visualize time-based trends with Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_timeBasic\" hidden><script type=\"text/plain\">@@DLH.StatisticsTime(records: Model.Records, jsVariableName: \"outputTime\", datetimeField: \"CreatedAt\", valueField: \"CreatedAt\")</script></div>\r\n<div id=\"sql_statistics_timeBasic\" hidden>SELECT * FROM Users</div>\r\n\r\n<button class=\"collapsible\">\r\n<span class=\"collapsible-label\">StatisticsTime: With category</span>\r\n<span class=\"collapsible-actions\">\r\n<span class=\"action-button\" onclick=\"openPopup(event, 'statistics_timeCategory')\">Code/Query</span>\r\n</span>\r\n</button>\r\n<div class=\"content\">\r\n    @DLH.StatisticsTime(records: Model.Records, jsVariableName: \"outputTimeCategory\", datetimeField: \"CreatedAt\", valueField: \"CreatedAt\", categoryField: \"Email\")\r\n    <div id=\"statisticsTimeCategory\"></div>\r\n    <script>\r\n        document.getElementById(\"statisticsTimeCategory\").textContent = JSON.stringify(outputTimeCategory);\r\n    </script>\r\n</div>\r\n<div id=\"description_statistics_timeCategory\" hidden>\r\nde:Erstellt eine Zeitreihe basierend auf einem Datumsfeld, wobei ein weiteres Feld als Kategorie verwendet wird. \r\nDie Daten werden als JavaScript-Variable bereitgestellt, z. B. zur Visualisierung zeitlicher Trends, unterteilt nach Kategorien, mit Chart.js.\r\n\r\nen:Generates a time series based on a datetime field, using another field as a category. \r\nThe data is provided as a JavaScript variable, for example to visualize time-based trends, categorized by a specific field, with Chart.js.\r\n</div>\r\n<div id=\"csharp_statistics_timeCategory\" hidden><script type=\"text/plain\">@@DLH.StatisticsTime(records: Model.Records, jsVariableName: \"outputTimeCategory\", datetimeField: \"CreatedAt\", valueField: \"CreatedAt\", categoryField: \"Email\")</script></div>\r\n<div id=\"sql_statistics_timeCategory\" hidden>SELECT * FROM Users</div>\r\n\r\n</div>","created":"2025-04-16T05:11:37","changed":"2025-05-09T08:05:40.0809689Z","test_parameters":null,"included_js_libs":"legacy_chartjs"}