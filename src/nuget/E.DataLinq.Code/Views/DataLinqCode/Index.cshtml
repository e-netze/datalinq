@model E.DataLinq.Code.Models.DataLinqCode.IndexModel
@{
    Layout = "~/Views/Shared/_Layout_empty-datalinq-code.cshtml";
    ViewBag.Title = $"DataLinq.Code::{Model.InstanceName}";
}

<div class="datalinq-code-body">
    <div class="datalinq-code-ide">

        @{Html.RenderPartial("_Sidebar");}
        <div class="resize-handle--x" id="sidebar-resize-handle"></div>
        @{Html.RenderPartial("_Toolbar");}      
        @{Html.RenderPartial("_Content");}   

    </div>
    <div class="datalinq-code-help">
        <iframe id='help-frame' src='' allow='clipboard-read; clipboard-write'>

        </iframe>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        function removeURLParameter(parameter) {
            var url = window.location.href;

            var urlparts = url.split('?');
            if (urlparts.length >= 2) {
                var prefix = encodeURIComponent(parameter) + '=';
                var params = urlparts[1].split(/[&;]/g);

                for (var i = params.length; i-- > 0;) {
                    if (params[i].lastIndexOf(prefix, 0) !== -1) {
                        params.splice(i, 1);
                    }
                }

                url = urlparts[0] + (params.length > 0 ? '?' + params.join('&') : '');
            }

            window.history.replaceState({}, document.title, url);
        }

        $(function() {
            window._datalinqCodeAccessToken = new URLSearchParams(window.location.search).get('dl_token');
            //console.log('_datalinqCodeSession', window._datalinqCodeAccessToken);

            removeURLParameter('dl_token');

            dataLinqCode.start('@Model.CurrentUrl',
                               '@Model.DataLinqEngineUrl',
                               '@Model.CurrentUsername', {
                                   createEndpoints: @Model.AllowCreateAndDeleteEndpoints.ToString().ToLower(),
                                   createQueries: @Model.ALlowCreateAndDeleteQueries.ToString().ToLower(),
                                   createViews: @Model.AllowCreateAndDeleteViews.ToString().ToLower(),
                                   deleteEndpoints: @Model.AllowCreateAndDeleteEndpoints.ToString().ToLower(),
                                   deleteQueries: @Model.ALlowCreateAndDeleteQueries.ToString().ToLower(),
                                   deleteViews: @Model.AllowCreateAndDeleteViews.ToString().ToLower(),
                                   useAppPrefixFilters: @Model.UseAppPrefixFilters.ToString().ToLower()
                               });
        });
    </script>

    <script type="text/javascript">
        const sidebar = document.getElementById('sidebar');
        const handle = document.getElementById('sidebar-resize-handle');

        let isDragging = false;
        let startX = 0;
        let startWidth = 300;

        const savedWidth = localStorage.getItem('sidebarWidth');
        if (savedWidth) {
          startWidth = parseInt(savedWidth, 10) || startWidth;
        }

        const minWidth = 300;
        const maxWidth = 500;

        let pendingWidth = null;  // store new width during dragging
        let rafId = null;

        handle.style.left = startWidth + 'px';
        document.documentElement.style.setProperty('--sidebar-width', startWidth + 'px');

        handle.addEventListener('mousedown', (e) => {
          e.preventDefault();
          isDragging = true;
          startX = e.clientX;
          startWidth = sidebar.offsetWidth;
          document.body.style.userSelect = 'none';
        });

        window.addEventListener('mousemove', (e) => {
          if (!isDragging) return;
          let newWidth = startWidth + (e.clientX - startX);
          if (newWidth < minWidth) newWidth = minWidth;
          if (newWidth > maxWidth) newWidth = maxWidth;

          // Save new width and schedule update if not already scheduled
          pendingWidth = newWidth;
          if (!rafId) {
            rafId = requestAnimationFrame(() => {
              sidebar.style.width = pendingWidth + 'px';
              handle.style.left = pendingWidth + 'px';
              document.documentElement.style.setProperty('--sidebar-width', pendingWidth + 'px');
              rafId = null;
            });
          }
        });

        window.addEventListener('mouseup', () => {
          if (isDragging) {
            isDragging = false;
            document.body.style.userSelect = '';
            if (rafId) {
              cancelAnimationFrame(rafId);
              rafId = null;
            }
          }
        });
    </script>
}